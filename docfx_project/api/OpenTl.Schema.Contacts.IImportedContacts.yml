### YamlMime:ManagedReference
items:
- uid: OpenTl.Schema.Contacts.IImportedContacts
  commentId: T:OpenTl.Schema.Contacts.IImportedContacts
  id: IImportedContacts
  parent: OpenTl.Schema.Contacts
  children:
  - OpenTl.Schema.Contacts.IImportedContacts.Imported
  - OpenTl.Schema.Contacts.IImportedContacts.PopularInvites
  - OpenTl.Schema.Contacts.IImportedContacts.RetryContacts
  - OpenTl.Schema.Contacts.IImportedContacts.Users
  langs:
  - csharp
  - vb
  name: IImportedContacts
  nameWithType: IImportedContacts
  fullName: OpenTl.Schema.Contacts.IImportedContacts
  type: Interface
  source:
    remote:
      path: src/OpenTl.Schema/_generated/Contacts/ImportedContacts/IImportedContacts.cs
      branch: master
      repo: https://github.com/OpenTl/OpenTl.Schema.git
    id: IImportedContacts
    path: ../src/OpenTl.Schema/_generated/Contacts/ImportedContacts/IImportedContacts.cs
    startLine: 9
  assemblies:
  - OpenTl.Schema
  namespace: OpenTl.Schema.Contacts
  syntax:
    content: 'public interface IImportedContacts : IObject'
    content.vb: >-
      Public Interface IImportedContacts

          Inherits IObject
  extensionMethods:
  - OpenTl.Schema.IObject.OpenTl.Schema.Utils.As``1
  - OpenTl.Schema.IObject.OpenTl.Schema.Utils.Cast``1
  - OpenTl.Schema.IObject.OpenTl.Schema.Utils.IsEmpty
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: OpenTl.Schema.Contacts.IImportedContacts.Imported
  commentId: P:OpenTl.Schema.Contacts.IImportedContacts.Imported
  id: Imported
  parent: OpenTl.Schema.Contacts.IImportedContacts
  langs:
  - csharp
  - vb
  name: Imported
  nameWithType: IImportedContacts.Imported
  fullName: OpenTl.Schema.Contacts.IImportedContacts.Imported
  type: Property
  source:
    remote:
      path: src/OpenTl.Schema/_generated/Contacts/ImportedContacts/IImportedContacts.cs
      branch: master
      repo: https://github.com/OpenTl/OpenTl.Schema.git
    id: Imported
    path: ../src/OpenTl.Schema/_generated/Contacts/ImportedContacts/IImportedContacts.cs
    startLine: 11
  assemblies:
  - OpenTl.Schema
  namespace: OpenTl.Schema.Contacts
  syntax:
    content: TVector<IImportedContact> Imported { get; set; }
    parameters: []
    return:
      type: OpenTl.Schema.TVector{OpenTl.Schema.IImportedContact}
    content.vb: Property Imported As TVector(Of IImportedContact)
  overload: OpenTl.Schema.Contacts.IImportedContacts.Imported*
  modifiers.csharp:
  - get
  - set
- uid: OpenTl.Schema.Contacts.IImportedContacts.PopularInvites
  commentId: P:OpenTl.Schema.Contacts.IImportedContacts.PopularInvites
  id: PopularInvites
  parent: OpenTl.Schema.Contacts.IImportedContacts
  langs:
  - csharp
  - vb
  name: PopularInvites
  nameWithType: IImportedContacts.PopularInvites
  fullName: OpenTl.Schema.Contacts.IImportedContacts.PopularInvites
  type: Property
  source:
    remote:
      path: src/OpenTl.Schema/_generated/Contacts/ImportedContacts/IImportedContacts.cs
      branch: master
      repo: https://github.com/OpenTl/OpenTl.Schema.git
    id: PopularInvites
    path: ../src/OpenTl.Schema/_generated/Contacts/ImportedContacts/IImportedContacts.cs
    startLine: 13
  assemblies:
  - OpenTl.Schema
  namespace: OpenTl.Schema.Contacts
  syntax:
    content: TVector<IPopularContact> PopularInvites { get; set; }
    parameters: []
    return:
      type: OpenTl.Schema.TVector{OpenTl.Schema.IPopularContact}
    content.vb: Property PopularInvites As TVector(Of IPopularContact)
  overload: OpenTl.Schema.Contacts.IImportedContacts.PopularInvites*
  modifiers.csharp:
  - get
  - set
- uid: OpenTl.Schema.Contacts.IImportedContacts.RetryContacts
  commentId: P:OpenTl.Schema.Contacts.IImportedContacts.RetryContacts
  id: RetryContacts
  parent: OpenTl.Schema.Contacts.IImportedContacts
  langs:
  - csharp
  - vb
  name: RetryContacts
  nameWithType: IImportedContacts.RetryContacts
  fullName: OpenTl.Schema.Contacts.IImportedContacts.RetryContacts
  type: Property
  source:
    remote:
      path: src/OpenTl.Schema/_generated/Contacts/ImportedContacts/IImportedContacts.cs
      branch: master
      repo: https://github.com/OpenTl/OpenTl.Schema.git
    id: RetryContacts
    path: ../src/OpenTl.Schema/_generated/Contacts/ImportedContacts/IImportedContacts.cs
    startLine: 15
  assemblies:
  - OpenTl.Schema
  namespace: OpenTl.Schema.Contacts
  syntax:
    content: TVector<long> RetryContacts { get; set; }
    parameters: []
    return:
      type: OpenTl.Schema.TVector{System.Int64}
    content.vb: Property RetryContacts As TVector(Of Long)
  overload: OpenTl.Schema.Contacts.IImportedContacts.RetryContacts*
  modifiers.csharp:
  - get
  - set
- uid: OpenTl.Schema.Contacts.IImportedContacts.Users
  commentId: P:OpenTl.Schema.Contacts.IImportedContacts.Users
  id: Users
  parent: OpenTl.Schema.Contacts.IImportedContacts
  langs:
  - csharp
  - vb
  name: Users
  nameWithType: IImportedContacts.Users
  fullName: OpenTl.Schema.Contacts.IImportedContacts.Users
  type: Property
  source:
    remote:
      path: src/OpenTl.Schema/_generated/Contacts/ImportedContacts/IImportedContacts.cs
      branch: master
      repo: https://github.com/OpenTl/OpenTl.Schema.git
    id: Users
    path: ../src/OpenTl.Schema/_generated/Contacts/ImportedContacts/IImportedContacts.cs
    startLine: 17
  assemblies:
  - OpenTl.Schema
  namespace: OpenTl.Schema.Contacts
  syntax:
    content: TVector<IUser> Users { get; set; }
    parameters: []
    return:
      type: OpenTl.Schema.TVector{OpenTl.Schema.IUser}
    content.vb: Property Users As TVector(Of IUser)
  overload: OpenTl.Schema.Contacts.IImportedContacts.Users*
  modifiers.csharp:
  - get
  - set
references:
- uid: OpenTl.Schema.Contacts
  commentId: N:OpenTl.Schema.Contacts
  isExternal: false
  name: OpenTl.Schema.Contacts
  nameWithType: OpenTl.Schema.Contacts
  fullName: OpenTl.Schema.Contacts
- uid: OpenTl.Schema.IObject.OpenTl.Schema.Utils.As``1
  commentId: M:OpenTl.Schema.Utils.As``1(OpenTl.Schema.IObject)
  parent: OpenTl.Schema.Utils
  definition: OpenTl.Schema.Utils.As``1(OpenTl.Schema.IObject)
  name: As<T>()
  nameWithType: Utils.As<T>()
  fullName: OpenTl.Schema.Utils.As<T>()
  nameWithType.vb: Utils.As(Of T)()
  fullName.vb: OpenTl.Schema.Utils.As(Of T)()
  name.vb: As(Of T)()
  spec.csharp:
  - uid: OpenTl.Schema.Utils.As``1
    name: As<T>
    nameWithType: Utils.As<T>
    fullName: OpenTl.Schema.Utils.As<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OpenTl.Schema.Utils.As``1
    name: As(Of T)
    nameWithType: Utils.As(Of T)
    fullName: OpenTl.Schema.Utils.As(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OpenTl.Schema.IObject.OpenTl.Schema.Utils.Cast``1
  commentId: M:OpenTl.Schema.Utils.Cast``1(OpenTl.Schema.IObject)
  parent: OpenTl.Schema.Utils
  definition: OpenTl.Schema.Utils.Cast``1(OpenTl.Schema.IObject)
  name: Cast<T>()
  nameWithType: Utils.Cast<T>()
  fullName: OpenTl.Schema.Utils.Cast<T>()
  nameWithType.vb: Utils.Cast(Of T)()
  fullName.vb: OpenTl.Schema.Utils.Cast(Of T)()
  name.vb: Cast(Of T)()
  spec.csharp:
  - uid: OpenTl.Schema.Utils.Cast``1
    name: Cast<T>
    nameWithType: Utils.Cast<T>
    fullName: OpenTl.Schema.Utils.Cast<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OpenTl.Schema.Utils.Cast``1
    name: Cast(Of T)
    nameWithType: Utils.Cast(Of T)
    fullName: OpenTl.Schema.Utils.Cast(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OpenTl.Schema.IObject.OpenTl.Schema.Utils.IsEmpty
  commentId: M:OpenTl.Schema.Utils.IsEmpty(OpenTl.Schema.IObject)
  parent: OpenTl.Schema.Utils
  definition: OpenTl.Schema.Utils.IsEmpty(OpenTl.Schema.IObject)
  name: IsEmpty()
  nameWithType: Utils.IsEmpty()
  fullName: OpenTl.Schema.Utils.IsEmpty()
  spec.csharp:
  - uid: OpenTl.Schema.Utils.IsEmpty
    name: IsEmpty
    nameWithType: Utils.IsEmpty
    fullName: OpenTl.Schema.Utils.IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OpenTl.Schema.Utils.IsEmpty
    name: IsEmpty
    nameWithType: Utils.IsEmpty
    fullName: OpenTl.Schema.Utils.IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OpenTl.Schema.Utils.As``1(OpenTl.Schema.IObject)
  commentId: M:OpenTl.Schema.Utils.As``1(OpenTl.Schema.IObject)
  isExternal: false
  name: As<T>(IObject)
  nameWithType: Utils.As<T>(IObject)
  fullName: OpenTl.Schema.Utils.As<T>(OpenTl.Schema.IObject)
  nameWithType.vb: Utils.As(Of T)(IObject)
  fullName.vb: OpenTl.Schema.Utils.As(Of T)(OpenTl.Schema.IObject)
  name.vb: As(Of T)(IObject)
  spec.csharp:
  - uid: OpenTl.Schema.Utils.As``1(OpenTl.Schema.IObject)
    name: As<T>
    nameWithType: Utils.As<T>
    fullName: OpenTl.Schema.Utils.As<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: OpenTl.Schema.IObject
    name: IObject
    nameWithType: IObject
    fullName: OpenTl.Schema.IObject
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OpenTl.Schema.Utils.As``1(OpenTl.Schema.IObject)
    name: As(Of T)
    nameWithType: Utils.As(Of T)
    fullName: OpenTl.Schema.Utils.As(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: OpenTl.Schema.IObject
    name: IObject
    nameWithType: IObject
    fullName: OpenTl.Schema.IObject
  - name: )
    nameWithType: )
    fullName: )
- uid: OpenTl.Schema.Utils
  commentId: T:OpenTl.Schema.Utils
  parent: OpenTl.Schema
  isExternal: false
  name: Utils
  nameWithType: Utils
  fullName: OpenTl.Schema.Utils
- uid: OpenTl.Schema.Utils.Cast``1(OpenTl.Schema.IObject)
  commentId: M:OpenTl.Schema.Utils.Cast``1(OpenTl.Schema.IObject)
  isExternal: false
  name: Cast<T>(IObject)
  nameWithType: Utils.Cast<T>(IObject)
  fullName: OpenTl.Schema.Utils.Cast<T>(OpenTl.Schema.IObject)
  nameWithType.vb: Utils.Cast(Of T)(IObject)
  fullName.vb: OpenTl.Schema.Utils.Cast(Of T)(OpenTl.Schema.IObject)
  name.vb: Cast(Of T)(IObject)
  spec.csharp:
  - uid: OpenTl.Schema.Utils.Cast``1(OpenTl.Schema.IObject)
    name: Cast<T>
    nameWithType: Utils.Cast<T>
    fullName: OpenTl.Schema.Utils.Cast<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: OpenTl.Schema.IObject
    name: IObject
    nameWithType: IObject
    fullName: OpenTl.Schema.IObject
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OpenTl.Schema.Utils.Cast``1(OpenTl.Schema.IObject)
    name: Cast(Of T)
    nameWithType: Utils.Cast(Of T)
    fullName: OpenTl.Schema.Utils.Cast(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: OpenTl.Schema.IObject
    name: IObject
    nameWithType: IObject
    fullName: OpenTl.Schema.IObject
  - name: )
    nameWithType: )
    fullName: )
- uid: OpenTl.Schema.Utils.IsEmpty(OpenTl.Schema.IObject)
  commentId: M:OpenTl.Schema.Utils.IsEmpty(OpenTl.Schema.IObject)
  isExternal: false
  name: IsEmpty(IObject)
  nameWithType: Utils.IsEmpty(IObject)
  fullName: OpenTl.Schema.Utils.IsEmpty(OpenTl.Schema.IObject)
  spec.csharp:
  - uid: OpenTl.Schema.Utils.IsEmpty(OpenTl.Schema.IObject)
    name: IsEmpty
    nameWithType: Utils.IsEmpty
    fullName: OpenTl.Schema.Utils.IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - uid: OpenTl.Schema.IObject
    name: IObject
    nameWithType: IObject
    fullName: OpenTl.Schema.IObject
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OpenTl.Schema.Utils.IsEmpty(OpenTl.Schema.IObject)
    name: IsEmpty
    nameWithType: Utils.IsEmpty
    fullName: OpenTl.Schema.Utils.IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - uid: OpenTl.Schema.IObject
    name: IObject
    nameWithType: IObject
    fullName: OpenTl.Schema.IObject
  - name: )
    nameWithType: )
    fullName: )
- uid: OpenTl.Schema
  commentId: N:OpenTl.Schema
  isExternal: false
  name: OpenTl.Schema
  nameWithType: OpenTl.Schema
  fullName: OpenTl.Schema
- uid: OpenTl.Schema.Contacts.IImportedContacts.Imported*
  commentId: Overload:OpenTl.Schema.Contacts.IImportedContacts.Imported
  isExternal: false
  name: Imported
  nameWithType: IImportedContacts.Imported
  fullName: OpenTl.Schema.Contacts.IImportedContacts.Imported
- uid: OpenTl.Schema.TVector{OpenTl.Schema.IImportedContact}
  commentId: T:OpenTl.Schema.TVector{OpenTl.Schema.IImportedContact}
  parent: OpenTl.Schema
  definition: OpenTl.Schema.TVector`1
  name: TVector<IImportedContact>
  nameWithType: TVector<IImportedContact>
  fullName: OpenTl.Schema.TVector<OpenTl.Schema.IImportedContact>
  nameWithType.vb: TVector(Of IImportedContact)
  fullName.vb: OpenTl.Schema.TVector(Of OpenTl.Schema.IImportedContact)
  name.vb: TVector(Of IImportedContact)
  spec.csharp:
  - uid: OpenTl.Schema.TVector`1
    name: TVector
    nameWithType: TVector
    fullName: OpenTl.Schema.TVector
  - name: <
    nameWithType: <
    fullName: <
  - uid: OpenTl.Schema.IImportedContact
    name: IImportedContact
    nameWithType: IImportedContact
    fullName: OpenTl.Schema.IImportedContact
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: OpenTl.Schema.TVector`1
    name: TVector
    nameWithType: TVector
    fullName: OpenTl.Schema.TVector
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OpenTl.Schema.IImportedContact
    name: IImportedContact
    nameWithType: IImportedContact
    fullName: OpenTl.Schema.IImportedContact
  - name: )
    nameWithType: )
    fullName: )
- uid: OpenTl.Schema.TVector`1
  commentId: T:OpenTl.Schema.TVector`1
  isExternal: false
  name: TVector<T>
  nameWithType: TVector<T>
  fullName: OpenTl.Schema.TVector<T>
  nameWithType.vb: TVector(Of T)
  fullName.vb: OpenTl.Schema.TVector(Of T)
  name.vb: TVector(Of T)
  spec.csharp:
  - uid: OpenTl.Schema.TVector`1
    name: TVector
    nameWithType: TVector
    fullName: OpenTl.Schema.TVector
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: OpenTl.Schema.TVector`1
    name: TVector
    nameWithType: TVector
    fullName: OpenTl.Schema.TVector
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OpenTl.Schema.Contacts.IImportedContacts.PopularInvites*
  commentId: Overload:OpenTl.Schema.Contacts.IImportedContacts.PopularInvites
  isExternal: false
  name: PopularInvites
  nameWithType: IImportedContacts.PopularInvites
  fullName: OpenTl.Schema.Contacts.IImportedContacts.PopularInvites
- uid: OpenTl.Schema.TVector{OpenTl.Schema.IPopularContact}
  commentId: T:OpenTl.Schema.TVector{OpenTl.Schema.IPopularContact}
  parent: OpenTl.Schema
  definition: OpenTl.Schema.TVector`1
  name: TVector<IPopularContact>
  nameWithType: TVector<IPopularContact>
  fullName: OpenTl.Schema.TVector<OpenTl.Schema.IPopularContact>
  nameWithType.vb: TVector(Of IPopularContact)
  fullName.vb: OpenTl.Schema.TVector(Of OpenTl.Schema.IPopularContact)
  name.vb: TVector(Of IPopularContact)
  spec.csharp:
  - uid: OpenTl.Schema.TVector`1
    name: TVector
    nameWithType: TVector
    fullName: OpenTl.Schema.TVector
  - name: <
    nameWithType: <
    fullName: <
  - uid: OpenTl.Schema.IPopularContact
    name: IPopularContact
    nameWithType: IPopularContact
    fullName: OpenTl.Schema.IPopularContact
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: OpenTl.Schema.TVector`1
    name: TVector
    nameWithType: TVector
    fullName: OpenTl.Schema.TVector
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OpenTl.Schema.IPopularContact
    name: IPopularContact
    nameWithType: IPopularContact
    fullName: OpenTl.Schema.IPopularContact
  - name: )
    nameWithType: )
    fullName: )
- uid: OpenTl.Schema.Contacts.IImportedContacts.RetryContacts*
  commentId: Overload:OpenTl.Schema.Contacts.IImportedContacts.RetryContacts
  isExternal: false
  name: RetryContacts
  nameWithType: IImportedContacts.RetryContacts
  fullName: OpenTl.Schema.Contacts.IImportedContacts.RetryContacts
- uid: OpenTl.Schema.TVector{System.Int64}
  commentId: T:OpenTl.Schema.TVector{System.Int64}
  parent: OpenTl.Schema
  definition: OpenTl.Schema.TVector`1
  name: TVector<Int64>
  nameWithType: TVector<Int64>
  fullName: OpenTl.Schema.TVector<System.Int64>
  nameWithType.vb: TVector(Of Int64)
  fullName.vb: OpenTl.Schema.TVector(Of System.Int64)
  name.vb: TVector(Of Int64)
  spec.csharp:
  - uid: OpenTl.Schema.TVector`1
    name: TVector
    nameWithType: TVector
    fullName: OpenTl.Schema.TVector
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: OpenTl.Schema.TVector`1
    name: TVector
    nameWithType: TVector
    fullName: OpenTl.Schema.TVector
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OpenTl.Schema.Contacts.IImportedContacts.Users*
  commentId: Overload:OpenTl.Schema.Contacts.IImportedContacts.Users
  isExternal: false
  name: Users
  nameWithType: IImportedContacts.Users
  fullName: OpenTl.Schema.Contacts.IImportedContacts.Users
- uid: OpenTl.Schema.TVector{OpenTl.Schema.IUser}
  commentId: T:OpenTl.Schema.TVector{OpenTl.Schema.IUser}
  parent: OpenTl.Schema
  definition: OpenTl.Schema.TVector`1
  name: TVector<IUser>
  nameWithType: TVector<IUser>
  fullName: OpenTl.Schema.TVector<OpenTl.Schema.IUser>
  nameWithType.vb: TVector(Of IUser)
  fullName.vb: OpenTl.Schema.TVector(Of OpenTl.Schema.IUser)
  name.vb: TVector(Of IUser)
  spec.csharp:
  - uid: OpenTl.Schema.TVector`1
    name: TVector
    nameWithType: TVector
    fullName: OpenTl.Schema.TVector
  - name: <
    nameWithType: <
    fullName: <
  - uid: OpenTl.Schema.IUser
    name: IUser
    nameWithType: IUser
    fullName: OpenTl.Schema.IUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: OpenTl.Schema.TVector`1
    name: TVector
    nameWithType: TVector
    fullName: OpenTl.Schema.TVector
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OpenTl.Schema.IUser
    name: IUser
    nameWithType: IUser
    fullName: OpenTl.Schema.IUser
  - name: )
    nameWithType: )
    fullName: )
