### YamlMime:ManagedReference
items:
- uid: OpenTl.Schema.Help.ISupport
  commentId: T:OpenTl.Schema.Help.ISupport
  id: ISupport
  parent: OpenTl.Schema.Help
  children:
  - OpenTl.Schema.Help.ISupport.PhoneNumber
  - OpenTl.Schema.Help.ISupport.PhoneNumberAsBinary
  - OpenTl.Schema.Help.ISupport.User
  langs:
  - csharp
  - vb
  name: ISupport
  nameWithType: ISupport
  fullName: OpenTl.Schema.Help.ISupport
  type: Interface
  source:
    remote:
      path: src/OpenTl.Schema/_generated/Help/Support/ISupport.cs
      branch: master
      repo: https://github.com/OpenTl/OpenTl.Schema.git
    id: ISupport
    path: ../src/OpenTl.Schema/_generated/Help/Support/ISupport.cs
    startLine: 9
  assemblies:
  - OpenTl.Schema
  namespace: OpenTl.Schema.Help
  syntax:
    content: 'public interface ISupport : IObject'
    content.vb: >-
      Public Interface ISupport
          Inherits IObject
  extensionMethods:
  - OpenTl.Schema.IObject.OpenTl.Schema.Utils.As``1
  - OpenTl.Schema.IObject.OpenTl.Schema.Utils.Cast``1
  - OpenTl.Schema.IObject.OpenTl.Schema.Utils.IsEmpty
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: OpenTl.Schema.Help.ISupport.PhoneNumberAsBinary
  commentId: P:OpenTl.Schema.Help.ISupport.PhoneNumberAsBinary
  id: PhoneNumberAsBinary
  parent: OpenTl.Schema.Help.ISupport
  langs:
  - csharp
  - vb
  name: PhoneNumberAsBinary
  nameWithType: ISupport.PhoneNumberAsBinary
  fullName: OpenTl.Schema.Help.ISupport.PhoneNumberAsBinary
  type: Property
  source:
    remote:
      path: src/OpenTl.Schema/_generated/Help/Support/ISupport.cs
      branch: master
      repo: https://github.com/OpenTl/OpenTl.Schema.git
    id: PhoneNumberAsBinary
    path: ../src/OpenTl.Schema/_generated/Help/Support/ISupport.cs
    startLine: 11
  assemblies:
  - OpenTl.Schema
  namespace: OpenTl.Schema.Help
  syntax:
    content: byte[] PhoneNumberAsBinary { get; set; }
    parameters: []
    return:
      type: System.Byte[]
    content.vb: Property PhoneNumberAsBinary As Byte()
  overload: OpenTl.Schema.Help.ISupport.PhoneNumberAsBinary*
  modifiers.csharp:
  - get
  - set
- uid: OpenTl.Schema.Help.ISupport.PhoneNumber
  commentId: P:OpenTl.Schema.Help.ISupport.PhoneNumber
  id: PhoneNumber
  parent: OpenTl.Schema.Help.ISupport
  langs:
  - csharp
  - vb
  name: PhoneNumber
  nameWithType: ISupport.PhoneNumber
  fullName: OpenTl.Schema.Help.ISupport.PhoneNumber
  type: Property
  source:
    remote:
      path: src/OpenTl.Schema/_generated/Help/Support/ISupport.cs
      branch: master
      repo: https://github.com/OpenTl/OpenTl.Schema.git
    id: PhoneNumber
    path: ../src/OpenTl.Schema/_generated/Help/Support/ISupport.cs
    startLine: 12
  assemblies:
  - OpenTl.Schema
  namespace: OpenTl.Schema.Help
  syntax:
    content: string PhoneNumber { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property PhoneNumber As String
  overload: OpenTl.Schema.Help.ISupport.PhoneNumber*
  modifiers.csharp:
  - get
  - set
- uid: OpenTl.Schema.Help.ISupport.User
  commentId: P:OpenTl.Schema.Help.ISupport.User
  id: User
  parent: OpenTl.Schema.Help.ISupport
  langs:
  - csharp
  - vb
  name: User
  nameWithType: ISupport.User
  fullName: OpenTl.Schema.Help.ISupport.User
  type: Property
  source:
    remote:
      path: src/OpenTl.Schema/_generated/Help/Support/ISupport.cs
      branch: master
      repo: https://github.com/OpenTl/OpenTl.Schema.git
    id: User
    path: ../src/OpenTl.Schema/_generated/Help/Support/ISupport.cs
    startLine: 14
  assemblies:
  - OpenTl.Schema
  namespace: OpenTl.Schema.Help
  syntax:
    content: IUser User { get; set; }
    parameters: []
    return:
      type: OpenTl.Schema.IUser
    content.vb: Property User As IUser
  overload: OpenTl.Schema.Help.ISupport.User*
  modifiers.csharp:
  - get
  - set
references:
- uid: OpenTl.Schema.Help
  commentId: N:OpenTl.Schema.Help
  isExternal: false
  name: OpenTl.Schema.Help
  nameWithType: OpenTl.Schema.Help
  fullName: OpenTl.Schema.Help
- uid: OpenTl.Schema.IObject.OpenTl.Schema.Utils.As``1
  commentId: M:OpenTl.Schema.Utils.As``1(OpenTl.Schema.IObject)
  parent: OpenTl.Schema.Utils
  definition: OpenTl.Schema.Utils.As``1(OpenTl.Schema.IObject)
  name: As<T>()
  nameWithType: Utils.As<T>()
  fullName: OpenTl.Schema.Utils.As<T>()
  nameWithType.vb: Utils.As(Of T)()
  fullName.vb: OpenTl.Schema.Utils.As(Of T)()
  name.vb: As(Of T)()
  spec.csharp:
  - uid: OpenTl.Schema.Utils.As``1
    name: As<T>
    nameWithType: Utils.As<T>
    fullName: OpenTl.Schema.Utils.As<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OpenTl.Schema.Utils.As``1
    name: As(Of T)
    nameWithType: Utils.As(Of T)
    fullName: OpenTl.Schema.Utils.As(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OpenTl.Schema.IObject.OpenTl.Schema.Utils.Cast``1
  commentId: M:OpenTl.Schema.Utils.Cast``1(OpenTl.Schema.IObject)
  parent: OpenTl.Schema.Utils
  definition: OpenTl.Schema.Utils.Cast``1(OpenTl.Schema.IObject)
  name: Cast<T>()
  nameWithType: Utils.Cast<T>()
  fullName: OpenTl.Schema.Utils.Cast<T>()
  nameWithType.vb: Utils.Cast(Of T)()
  fullName.vb: OpenTl.Schema.Utils.Cast(Of T)()
  name.vb: Cast(Of T)()
  spec.csharp:
  - uid: OpenTl.Schema.Utils.Cast``1
    name: Cast<T>
    nameWithType: Utils.Cast<T>
    fullName: OpenTl.Schema.Utils.Cast<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OpenTl.Schema.Utils.Cast``1
    name: Cast(Of T)
    nameWithType: Utils.Cast(Of T)
    fullName: OpenTl.Schema.Utils.Cast(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OpenTl.Schema.IObject.OpenTl.Schema.Utils.IsEmpty
  commentId: M:OpenTl.Schema.Utils.IsEmpty(OpenTl.Schema.IObject)
  parent: OpenTl.Schema.Utils
  definition: OpenTl.Schema.Utils.IsEmpty(OpenTl.Schema.IObject)
  name: IsEmpty()
  nameWithType: Utils.IsEmpty()
  fullName: OpenTl.Schema.Utils.IsEmpty()
  spec.csharp:
  - uid: OpenTl.Schema.Utils.IsEmpty
    name: IsEmpty
    nameWithType: Utils.IsEmpty
    fullName: OpenTl.Schema.Utils.IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OpenTl.Schema.Utils.IsEmpty
    name: IsEmpty
    nameWithType: Utils.IsEmpty
    fullName: OpenTl.Schema.Utils.IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OpenTl.Schema.Utils.As``1(OpenTl.Schema.IObject)
  commentId: M:OpenTl.Schema.Utils.As``1(OpenTl.Schema.IObject)
  isExternal: false
  name: As<T>(IObject)
  nameWithType: Utils.As<T>(IObject)
  fullName: OpenTl.Schema.Utils.As<T>(OpenTl.Schema.IObject)
  nameWithType.vb: Utils.As(Of T)(IObject)
  fullName.vb: OpenTl.Schema.Utils.As(Of T)(OpenTl.Schema.IObject)
  name.vb: As(Of T)(IObject)
  spec.csharp:
  - uid: OpenTl.Schema.Utils.As``1(OpenTl.Schema.IObject)
    name: As<T>
    nameWithType: Utils.As<T>
    fullName: OpenTl.Schema.Utils.As<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: OpenTl.Schema.IObject
    name: IObject
    nameWithType: IObject
    fullName: OpenTl.Schema.IObject
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OpenTl.Schema.Utils.As``1(OpenTl.Schema.IObject)
    name: As(Of T)
    nameWithType: Utils.As(Of T)
    fullName: OpenTl.Schema.Utils.As(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: OpenTl.Schema.IObject
    name: IObject
    nameWithType: IObject
    fullName: OpenTl.Schema.IObject
  - name: )
    nameWithType: )
    fullName: )
- uid: OpenTl.Schema.Utils
  commentId: T:OpenTl.Schema.Utils
  parent: OpenTl.Schema
  isExternal: false
  name: Utils
  nameWithType: Utils
  fullName: OpenTl.Schema.Utils
- uid: OpenTl.Schema.Utils.Cast``1(OpenTl.Schema.IObject)
  commentId: M:OpenTl.Schema.Utils.Cast``1(OpenTl.Schema.IObject)
  isExternal: false
  name: Cast<T>(IObject)
  nameWithType: Utils.Cast<T>(IObject)
  fullName: OpenTl.Schema.Utils.Cast<T>(OpenTl.Schema.IObject)
  nameWithType.vb: Utils.Cast(Of T)(IObject)
  fullName.vb: OpenTl.Schema.Utils.Cast(Of T)(OpenTl.Schema.IObject)
  name.vb: Cast(Of T)(IObject)
  spec.csharp:
  - uid: OpenTl.Schema.Utils.Cast``1(OpenTl.Schema.IObject)
    name: Cast<T>
    nameWithType: Utils.Cast<T>
    fullName: OpenTl.Schema.Utils.Cast<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: OpenTl.Schema.IObject
    name: IObject
    nameWithType: IObject
    fullName: OpenTl.Schema.IObject
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OpenTl.Schema.Utils.Cast``1(OpenTl.Schema.IObject)
    name: Cast(Of T)
    nameWithType: Utils.Cast(Of T)
    fullName: OpenTl.Schema.Utils.Cast(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: OpenTl.Schema.IObject
    name: IObject
    nameWithType: IObject
    fullName: OpenTl.Schema.IObject
  - name: )
    nameWithType: )
    fullName: )
- uid: OpenTl.Schema.Utils.IsEmpty(OpenTl.Schema.IObject)
  commentId: M:OpenTl.Schema.Utils.IsEmpty(OpenTl.Schema.IObject)
  isExternal: false
  name: IsEmpty(IObject)
  nameWithType: Utils.IsEmpty(IObject)
  fullName: OpenTl.Schema.Utils.IsEmpty(OpenTl.Schema.IObject)
  spec.csharp:
  - uid: OpenTl.Schema.Utils.IsEmpty(OpenTl.Schema.IObject)
    name: IsEmpty
    nameWithType: Utils.IsEmpty
    fullName: OpenTl.Schema.Utils.IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - uid: OpenTl.Schema.IObject
    name: IObject
    nameWithType: IObject
    fullName: OpenTl.Schema.IObject
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OpenTl.Schema.Utils.IsEmpty(OpenTl.Schema.IObject)
    name: IsEmpty
    nameWithType: Utils.IsEmpty
    fullName: OpenTl.Schema.Utils.IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - uid: OpenTl.Schema.IObject
    name: IObject
    nameWithType: IObject
    fullName: OpenTl.Schema.IObject
  - name: )
    nameWithType: )
    fullName: )
- uid: OpenTl.Schema
  commentId: N:OpenTl.Schema
  isExternal: false
  name: OpenTl.Schema
  nameWithType: OpenTl.Schema
  fullName: OpenTl.Schema
- uid: OpenTl.Schema.Help.ISupport.PhoneNumberAsBinary*
  commentId: Overload:OpenTl.Schema.Help.ISupport.PhoneNumberAsBinary
  isExternal: false
  name: PhoneNumberAsBinary
  nameWithType: ISupport.PhoneNumberAsBinary
  fullName: OpenTl.Schema.Help.ISupport.PhoneNumberAsBinary
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: OpenTl.Schema.Help.ISupport.PhoneNumber*
  commentId: Overload:OpenTl.Schema.Help.ISupport.PhoneNumber
  isExternal: false
  name: PhoneNumber
  nameWithType: ISupport.PhoneNumber
  fullName: OpenTl.Schema.Help.ISupport.PhoneNumber
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: OpenTl.Schema.Help.ISupport.User*
  commentId: Overload:OpenTl.Schema.Help.ISupport.User
  isExternal: false
  name: User
  nameWithType: ISupport.User
  fullName: OpenTl.Schema.Help.ISupport.User
- uid: OpenTl.Schema.IUser
  commentId: T:OpenTl.Schema.IUser
  parent: OpenTl.Schema
  isExternal: false
  name: IUser
  nameWithType: IUser
  fullName: OpenTl.Schema.IUser
