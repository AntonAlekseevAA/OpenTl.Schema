### YamlMime:ManagedReference
items:
- uid: OpenTl.Schema.IInputContact
  commentId: T:OpenTl.Schema.IInputContact
  id: IInputContact
  parent: OpenTl.Schema
  children:
  - OpenTl.Schema.IInputContact.ClientId
  - OpenTl.Schema.IInputContact.FirstName
  - OpenTl.Schema.IInputContact.FirstNameAsBinary
  - OpenTl.Schema.IInputContact.LastName
  - OpenTl.Schema.IInputContact.LastNameAsBinary
  - OpenTl.Schema.IInputContact.Phone
  - OpenTl.Schema.IInputContact.PhoneAsBinary
  langs:
  - csharp
  - vb
  name: IInputContact
  nameWithType: IInputContact
  fullName: OpenTl.Schema.IInputContact
  type: Interface
  source:
    remote:
      path: src/OpenTl.Schema/_generated/_Entities/InputContact/IInputContact.cs
      branch: master
      repo: https://github.com/OpenTl/OpenTl.Schema.git
    id: IInputContact
    path: ../src/OpenTl.Schema/_generated/_Entities/InputContact/IInputContact.cs
    startLine: 9
  assemblies:
  - OpenTl.Schema
  namespace: OpenTl.Schema
  syntax:
    content: 'public interface IInputContact : IObject'
    content.vb: >-
      Public Interface IInputContact
          Inherits IObject
  extensionMethods:
  - OpenTl.Schema.IObject.OpenTl.Schema.Utils.As``1
  - OpenTl.Schema.IObject.OpenTl.Schema.Utils.Cast``1
  - OpenTl.Schema.IObject.OpenTl.Schema.Utils.IsEmpty
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: OpenTl.Schema.IInputContact.ClientId
  commentId: P:OpenTl.Schema.IInputContact.ClientId
  id: ClientId
  parent: OpenTl.Schema.IInputContact
  langs:
  - csharp
  - vb
  name: ClientId
  nameWithType: IInputContact.ClientId
  fullName: OpenTl.Schema.IInputContact.ClientId
  type: Property
  source:
    remote:
      path: src/OpenTl.Schema/_generated/_Entities/InputContact/IInputContact.cs
      branch: master
      repo: https://github.com/OpenTl/OpenTl.Schema.git
    id: ClientId
    path: ../src/OpenTl.Schema/_generated/_Entities/InputContact/IInputContact.cs
    startLine: 11
  assemblies:
  - OpenTl.Schema
  namespace: OpenTl.Schema
  syntax:
    content: long ClientId { get; set; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Property ClientId As Long
  overload: OpenTl.Schema.IInputContact.ClientId*
  modifiers.csharp:
  - get
  - set
- uid: OpenTl.Schema.IInputContact.PhoneAsBinary
  commentId: P:OpenTl.Schema.IInputContact.PhoneAsBinary
  id: PhoneAsBinary
  parent: OpenTl.Schema.IInputContact
  langs:
  - csharp
  - vb
  name: PhoneAsBinary
  nameWithType: IInputContact.PhoneAsBinary
  fullName: OpenTl.Schema.IInputContact.PhoneAsBinary
  type: Property
  source:
    remote:
      path: src/OpenTl.Schema/_generated/_Entities/InputContact/IInputContact.cs
      branch: master
      repo: https://github.com/OpenTl/OpenTl.Schema.git
    id: PhoneAsBinary
    path: ../src/OpenTl.Schema/_generated/_Entities/InputContact/IInputContact.cs
    startLine: 13
  assemblies:
  - OpenTl.Schema
  namespace: OpenTl.Schema
  syntax:
    content: byte[] PhoneAsBinary { get; set; }
    parameters: []
    return:
      type: System.Byte[]
    content.vb: Property PhoneAsBinary As Byte()
  overload: OpenTl.Schema.IInputContact.PhoneAsBinary*
  modifiers.csharp:
  - get
  - set
- uid: OpenTl.Schema.IInputContact.Phone
  commentId: P:OpenTl.Schema.IInputContact.Phone
  id: Phone
  parent: OpenTl.Schema.IInputContact
  langs:
  - csharp
  - vb
  name: Phone
  nameWithType: IInputContact.Phone
  fullName: OpenTl.Schema.IInputContact.Phone
  type: Property
  source:
    remote:
      path: src/OpenTl.Schema/_generated/_Entities/InputContact/IInputContact.cs
      branch: master
      repo: https://github.com/OpenTl/OpenTl.Schema.git
    id: Phone
    path: ../src/OpenTl.Schema/_generated/_Entities/InputContact/IInputContact.cs
    startLine: 14
  assemblies:
  - OpenTl.Schema
  namespace: OpenTl.Schema
  syntax:
    content: string Phone { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property Phone As String
  overload: OpenTl.Schema.IInputContact.Phone*
  modifiers.csharp:
  - get
  - set
- uid: OpenTl.Schema.IInputContact.FirstNameAsBinary
  commentId: P:OpenTl.Schema.IInputContact.FirstNameAsBinary
  id: FirstNameAsBinary
  parent: OpenTl.Schema.IInputContact
  langs:
  - csharp
  - vb
  name: FirstNameAsBinary
  nameWithType: IInputContact.FirstNameAsBinary
  fullName: OpenTl.Schema.IInputContact.FirstNameAsBinary
  type: Property
  source:
    remote:
      path: src/OpenTl.Schema/_generated/_Entities/InputContact/IInputContact.cs
      branch: master
      repo: https://github.com/OpenTl/OpenTl.Schema.git
    id: FirstNameAsBinary
    path: ../src/OpenTl.Schema/_generated/_Entities/InputContact/IInputContact.cs
    startLine: 16
  assemblies:
  - OpenTl.Schema
  namespace: OpenTl.Schema
  syntax:
    content: byte[] FirstNameAsBinary { get; set; }
    parameters: []
    return:
      type: System.Byte[]
    content.vb: Property FirstNameAsBinary As Byte()
  overload: OpenTl.Schema.IInputContact.FirstNameAsBinary*
  modifiers.csharp:
  - get
  - set
- uid: OpenTl.Schema.IInputContact.FirstName
  commentId: P:OpenTl.Schema.IInputContact.FirstName
  id: FirstName
  parent: OpenTl.Schema.IInputContact
  langs:
  - csharp
  - vb
  name: FirstName
  nameWithType: IInputContact.FirstName
  fullName: OpenTl.Schema.IInputContact.FirstName
  type: Property
  source:
    remote:
      path: src/OpenTl.Schema/_generated/_Entities/InputContact/IInputContact.cs
      branch: master
      repo: https://github.com/OpenTl/OpenTl.Schema.git
    id: FirstName
    path: ../src/OpenTl.Schema/_generated/_Entities/InputContact/IInputContact.cs
    startLine: 17
  assemblies:
  - OpenTl.Schema
  namespace: OpenTl.Schema
  syntax:
    content: string FirstName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property FirstName As String
  overload: OpenTl.Schema.IInputContact.FirstName*
  modifiers.csharp:
  - get
  - set
- uid: OpenTl.Schema.IInputContact.LastNameAsBinary
  commentId: P:OpenTl.Schema.IInputContact.LastNameAsBinary
  id: LastNameAsBinary
  parent: OpenTl.Schema.IInputContact
  langs:
  - csharp
  - vb
  name: LastNameAsBinary
  nameWithType: IInputContact.LastNameAsBinary
  fullName: OpenTl.Schema.IInputContact.LastNameAsBinary
  type: Property
  source:
    remote:
      path: src/OpenTl.Schema/_generated/_Entities/InputContact/IInputContact.cs
      branch: master
      repo: https://github.com/OpenTl/OpenTl.Schema.git
    id: LastNameAsBinary
    path: ../src/OpenTl.Schema/_generated/_Entities/InputContact/IInputContact.cs
    startLine: 19
  assemblies:
  - OpenTl.Schema
  namespace: OpenTl.Schema
  syntax:
    content: byte[] LastNameAsBinary { get; set; }
    parameters: []
    return:
      type: System.Byte[]
    content.vb: Property LastNameAsBinary As Byte()
  overload: OpenTl.Schema.IInputContact.LastNameAsBinary*
  modifiers.csharp:
  - get
  - set
- uid: OpenTl.Schema.IInputContact.LastName
  commentId: P:OpenTl.Schema.IInputContact.LastName
  id: LastName
  parent: OpenTl.Schema.IInputContact
  langs:
  - csharp
  - vb
  name: LastName
  nameWithType: IInputContact.LastName
  fullName: OpenTl.Schema.IInputContact.LastName
  type: Property
  source:
    remote:
      path: src/OpenTl.Schema/_generated/_Entities/InputContact/IInputContact.cs
      branch: master
      repo: https://github.com/OpenTl/OpenTl.Schema.git
    id: LastName
    path: ../src/OpenTl.Schema/_generated/_Entities/InputContact/IInputContact.cs
    startLine: 20
  assemblies:
  - OpenTl.Schema
  namespace: OpenTl.Schema
  syntax:
    content: string LastName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property LastName As String
  overload: OpenTl.Schema.IInputContact.LastName*
  modifiers.csharp:
  - get
  - set
references:
- uid: OpenTl.Schema
  commentId: N:OpenTl.Schema
  isExternal: false
  name: OpenTl.Schema
  nameWithType: OpenTl.Schema
  fullName: OpenTl.Schema
- uid: OpenTl.Schema.IObject.OpenTl.Schema.Utils.As``1
  commentId: M:OpenTl.Schema.Utils.As``1(OpenTl.Schema.IObject)
  parent: OpenTl.Schema.Utils
  definition: OpenTl.Schema.Utils.As``1(OpenTl.Schema.IObject)
  name: As<T>()
  nameWithType: Utils.As<T>()
  fullName: OpenTl.Schema.Utils.As<T>()
  nameWithType.vb: Utils.As(Of T)()
  fullName.vb: OpenTl.Schema.Utils.As(Of T)()
  name.vb: As(Of T)()
  spec.csharp:
  - uid: OpenTl.Schema.Utils.As``1
    name: As<T>
    nameWithType: Utils.As<T>
    fullName: OpenTl.Schema.Utils.As<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OpenTl.Schema.Utils.As``1
    name: As(Of T)
    nameWithType: Utils.As(Of T)
    fullName: OpenTl.Schema.Utils.As(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OpenTl.Schema.IObject.OpenTl.Schema.Utils.Cast``1
  commentId: M:OpenTl.Schema.Utils.Cast``1(OpenTl.Schema.IObject)
  parent: OpenTl.Schema.Utils
  definition: OpenTl.Schema.Utils.Cast``1(OpenTl.Schema.IObject)
  name: Cast<T>()
  nameWithType: Utils.Cast<T>()
  fullName: OpenTl.Schema.Utils.Cast<T>()
  nameWithType.vb: Utils.Cast(Of T)()
  fullName.vb: OpenTl.Schema.Utils.Cast(Of T)()
  name.vb: Cast(Of T)()
  spec.csharp:
  - uid: OpenTl.Schema.Utils.Cast``1
    name: Cast<T>
    nameWithType: Utils.Cast<T>
    fullName: OpenTl.Schema.Utils.Cast<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OpenTl.Schema.Utils.Cast``1
    name: Cast(Of T)
    nameWithType: Utils.Cast(Of T)
    fullName: OpenTl.Schema.Utils.Cast(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OpenTl.Schema.IObject.OpenTl.Schema.Utils.IsEmpty
  commentId: M:OpenTl.Schema.Utils.IsEmpty(OpenTl.Schema.IObject)
  parent: OpenTl.Schema.Utils
  definition: OpenTl.Schema.Utils.IsEmpty(OpenTl.Schema.IObject)
  name: IsEmpty()
  nameWithType: Utils.IsEmpty()
  fullName: OpenTl.Schema.Utils.IsEmpty()
  spec.csharp:
  - uid: OpenTl.Schema.Utils.IsEmpty
    name: IsEmpty
    nameWithType: Utils.IsEmpty
    fullName: OpenTl.Schema.Utils.IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OpenTl.Schema.Utils.IsEmpty
    name: IsEmpty
    nameWithType: Utils.IsEmpty
    fullName: OpenTl.Schema.Utils.IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: OpenTl.Schema.Utils.As``1(OpenTl.Schema.IObject)
  commentId: M:OpenTl.Schema.Utils.As``1(OpenTl.Schema.IObject)
  isExternal: false
  name: As<T>(IObject)
  nameWithType: Utils.As<T>(IObject)
  fullName: OpenTl.Schema.Utils.As<T>(OpenTl.Schema.IObject)
  nameWithType.vb: Utils.As(Of T)(IObject)
  fullName.vb: OpenTl.Schema.Utils.As(Of T)(OpenTl.Schema.IObject)
  name.vb: As(Of T)(IObject)
  spec.csharp:
  - uid: OpenTl.Schema.Utils.As``1(OpenTl.Schema.IObject)
    name: As<T>
    nameWithType: Utils.As<T>
    fullName: OpenTl.Schema.Utils.As<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: OpenTl.Schema.IObject
    name: IObject
    nameWithType: IObject
    fullName: OpenTl.Schema.IObject
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OpenTl.Schema.Utils.As``1(OpenTl.Schema.IObject)
    name: As(Of T)
    nameWithType: Utils.As(Of T)
    fullName: OpenTl.Schema.Utils.As(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: OpenTl.Schema.IObject
    name: IObject
    nameWithType: IObject
    fullName: OpenTl.Schema.IObject
  - name: )
    nameWithType: )
    fullName: )
- uid: OpenTl.Schema.Utils
  commentId: T:OpenTl.Schema.Utils
  parent: OpenTl.Schema
  isExternal: false
  name: Utils
  nameWithType: Utils
  fullName: OpenTl.Schema.Utils
- uid: OpenTl.Schema.Utils.Cast``1(OpenTl.Schema.IObject)
  commentId: M:OpenTl.Schema.Utils.Cast``1(OpenTl.Schema.IObject)
  isExternal: false
  name: Cast<T>(IObject)
  nameWithType: Utils.Cast<T>(IObject)
  fullName: OpenTl.Schema.Utils.Cast<T>(OpenTl.Schema.IObject)
  nameWithType.vb: Utils.Cast(Of T)(IObject)
  fullName.vb: OpenTl.Schema.Utils.Cast(Of T)(OpenTl.Schema.IObject)
  name.vb: Cast(Of T)(IObject)
  spec.csharp:
  - uid: OpenTl.Schema.Utils.Cast``1(OpenTl.Schema.IObject)
    name: Cast<T>
    nameWithType: Utils.Cast<T>
    fullName: OpenTl.Schema.Utils.Cast<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: OpenTl.Schema.IObject
    name: IObject
    nameWithType: IObject
    fullName: OpenTl.Schema.IObject
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OpenTl.Schema.Utils.Cast``1(OpenTl.Schema.IObject)
    name: Cast(Of T)
    nameWithType: Utils.Cast(Of T)
    fullName: OpenTl.Schema.Utils.Cast(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: OpenTl.Schema.IObject
    name: IObject
    nameWithType: IObject
    fullName: OpenTl.Schema.IObject
  - name: )
    nameWithType: )
    fullName: )
- uid: OpenTl.Schema.Utils.IsEmpty(OpenTl.Schema.IObject)
  commentId: M:OpenTl.Schema.Utils.IsEmpty(OpenTl.Schema.IObject)
  isExternal: false
  name: IsEmpty(IObject)
  nameWithType: Utils.IsEmpty(IObject)
  fullName: OpenTl.Schema.Utils.IsEmpty(OpenTl.Schema.IObject)
  spec.csharp:
  - uid: OpenTl.Schema.Utils.IsEmpty(OpenTl.Schema.IObject)
    name: IsEmpty
    nameWithType: Utils.IsEmpty
    fullName: OpenTl.Schema.Utils.IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - uid: OpenTl.Schema.IObject
    name: IObject
    nameWithType: IObject
    fullName: OpenTl.Schema.IObject
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OpenTl.Schema.Utils.IsEmpty(OpenTl.Schema.IObject)
    name: IsEmpty
    nameWithType: Utils.IsEmpty
    fullName: OpenTl.Schema.Utils.IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - uid: OpenTl.Schema.IObject
    name: IObject
    nameWithType: IObject
    fullName: OpenTl.Schema.IObject
  - name: )
    nameWithType: )
    fullName: )
- uid: OpenTl.Schema.IInputContact.ClientId*
  commentId: Overload:OpenTl.Schema.IInputContact.ClientId
  isExternal: false
  name: ClientId
  nameWithType: IInputContact.ClientId
  fullName: OpenTl.Schema.IInputContact.ClientId
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: OpenTl.Schema.IInputContact.PhoneAsBinary*
  commentId: Overload:OpenTl.Schema.IInputContact.PhoneAsBinary
  isExternal: false
  name: PhoneAsBinary
  nameWithType: IInputContact.PhoneAsBinary
  fullName: OpenTl.Schema.IInputContact.PhoneAsBinary
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: OpenTl.Schema.IInputContact.Phone*
  commentId: Overload:OpenTl.Schema.IInputContact.Phone
  isExternal: false
  name: Phone
  nameWithType: IInputContact.Phone
  fullName: OpenTl.Schema.IInputContact.Phone
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: OpenTl.Schema.IInputContact.FirstNameAsBinary*
  commentId: Overload:OpenTl.Schema.IInputContact.FirstNameAsBinary
  isExternal: false
  name: FirstNameAsBinary
  nameWithType: IInputContact.FirstNameAsBinary
  fullName: OpenTl.Schema.IInputContact.FirstNameAsBinary
- uid: OpenTl.Schema.IInputContact.FirstName*
  commentId: Overload:OpenTl.Schema.IInputContact.FirstName
  isExternal: false
  name: FirstName
  nameWithType: IInputContact.FirstName
  fullName: OpenTl.Schema.IInputContact.FirstName
- uid: OpenTl.Schema.IInputContact.LastNameAsBinary*
  commentId: Overload:OpenTl.Schema.IInputContact.LastNameAsBinary
  isExternal: false
  name: LastNameAsBinary
  nameWithType: IInputContact.LastNameAsBinary
  fullName: OpenTl.Schema.IInputContact.LastNameAsBinary
- uid: OpenTl.Schema.IInputContact.LastName*
  commentId: Overload:OpenTl.Schema.IInputContact.LastName
  isExternal: false
  name: LastName
  nameWithType: IInputContact.LastName
  fullName: OpenTl.Schema.IInputContact.LastName
