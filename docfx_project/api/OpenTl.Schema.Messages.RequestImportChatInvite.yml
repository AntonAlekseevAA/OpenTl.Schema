### YamlMime:ManagedReference
items:
- uid: OpenTl.Schema.Messages.RequestImportChatInvite
  commentId: T:OpenTl.Schema.Messages.RequestImportChatInvite
  id: RequestImportChatInvite
  parent: OpenTl.Schema.Messages
  children:
  - OpenTl.Schema.Messages.RequestImportChatInvite.Hash
  - OpenTl.Schema.Messages.RequestImportChatInvite.HashAsBinary
  langs:
  - csharp
  - vb
  name: RequestImportChatInvite
  nameWithType: RequestImportChatInvite
  fullName: OpenTl.Schema.Messages.RequestImportChatInvite
  type: Class
  source:
    remote:
      path: src/OpenTl.Schema/_generated/Messages/RequestImportChatInvite.cs
      branch: master
      repo: https://github.com/OpenTl/OpenTl.Schema.git
    id: RequestImportChatInvite
    path: ../src/OpenTl.Schema/_generated/Messages/RequestImportChatInvite.cs
    startLine: 11
  assemblies:
  - OpenTl.Schema
  namespace: OpenTl.Schema.Messages
  syntax:
    content: 'public class RequestImportChatInvite : object, IRequest<IUpdates>, IRequest, IObject'
    content.vb: >-
      Public Class RequestImportChatInvite

          Inherits Object

          Implements IRequest(Of IUpdates), IRequest, IObject
  inheritance:
  - System.Object
  implements:
  - OpenTl.Schema.IRequest{OpenTl.Schema.IUpdates}
  - OpenTl.Schema.IRequest
  - OpenTl.Schema.IObject
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OpenTl.Schema.Messages.RequestImportChatInvite.HashAsBinary
  commentId: P:OpenTl.Schema.Messages.RequestImportChatInvite.HashAsBinary
  id: HashAsBinary
  parent: OpenTl.Schema.Messages.RequestImportChatInvite
  langs:
  - csharp
  - vb
  name: HashAsBinary
  nameWithType: RequestImportChatInvite.HashAsBinary
  fullName: OpenTl.Schema.Messages.RequestImportChatInvite.HashAsBinary
  type: Property
  source:
    remote:
      path: src/OpenTl.Schema/_generated/Messages/RequestImportChatInvite.cs
      branch: master
      repo: https://github.com/OpenTl/OpenTl.Schema.git
    id: HashAsBinary
    path: ../src/OpenTl.Schema/_generated/Messages/RequestImportChatInvite.cs
    startLine: 15
  assemblies:
  - OpenTl.Schema
  namespace: OpenTl.Schema.Messages
  summary: Binary representation for the &apos;Hash&apos; property
  example: []
  syntax:
    content: public byte[] HashAsBinary { get; set; }
    parameters: []
    return:
      type: System.Byte[]
    content.vb: Public Property HashAsBinary As Byte()
  overload: OpenTl.Schema.Messages.RequestImportChatInvite.HashAsBinary*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OpenTl.Schema.Messages.RequestImportChatInvite.Hash
  commentId: P:OpenTl.Schema.Messages.RequestImportChatInvite.Hash
  id: Hash
  parent: OpenTl.Schema.Messages.RequestImportChatInvite
  langs:
  - csharp
  - vb
  name: Hash
  nameWithType: RequestImportChatInvite.Hash
  fullName: OpenTl.Schema.Messages.RequestImportChatInvite.Hash
  type: Property
  source:
    remote:
      path: src/OpenTl.Schema/_generated/Messages/RequestImportChatInvite.cs
      branch: master
      repo: https://github.com/OpenTl/OpenTl.Schema.git
    id: Hash
    path: ../src/OpenTl.Schema/_generated/Messages/RequestImportChatInvite.cs
    startLine: 19
  assemblies:
  - OpenTl.Schema
  namespace: OpenTl.Schema.Messages
  syntax:
    content: public string Hash { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Hash As String
  overload: OpenTl.Schema.Messages.RequestImportChatInvite.Hash*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: OpenTl.Schema.Messages
  commentId: N:OpenTl.Schema.Messages
  isExternal: false
  name: OpenTl.Schema.Messages
  nameWithType: OpenTl.Schema.Messages
  fullName: OpenTl.Schema.Messages
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: OpenTl.Schema.IRequest{OpenTl.Schema.IUpdates}
  commentId: T:OpenTl.Schema.IRequest{OpenTl.Schema.IUpdates}
  parent: OpenTl.Schema
  definition: OpenTl.Schema.IRequest`1
  name: IRequest<IUpdates>
  nameWithType: IRequest<IUpdates>
  fullName: OpenTl.Schema.IRequest<OpenTl.Schema.IUpdates>
  nameWithType.vb: IRequest(Of IUpdates)
  fullName.vb: OpenTl.Schema.IRequest(Of OpenTl.Schema.IUpdates)
  name.vb: IRequest(Of IUpdates)
  spec.csharp:
  - uid: OpenTl.Schema.IRequest`1
    name: IRequest
    nameWithType: IRequest
    fullName: OpenTl.Schema.IRequest
  - name: <
    nameWithType: <
    fullName: <
  - uid: OpenTl.Schema.IUpdates
    name: IUpdates
    nameWithType: IUpdates
    fullName: OpenTl.Schema.IUpdates
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: OpenTl.Schema.IRequest`1
    name: IRequest
    nameWithType: IRequest
    fullName: OpenTl.Schema.IRequest
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OpenTl.Schema.IUpdates
    name: IUpdates
    nameWithType: IUpdates
    fullName: OpenTl.Schema.IUpdates
  - name: )
    nameWithType: )
    fullName: )
- uid: OpenTl.Schema.IRequest
  commentId: T:OpenTl.Schema.IRequest
  parent: OpenTl.Schema
  isExternal: false
  name: IRequest
  nameWithType: IRequest
  fullName: OpenTl.Schema.IRequest
- uid: OpenTl.Schema.IObject
  commentId: T:OpenTl.Schema.IObject
  parent: OpenTl.Schema
  isExternal: false
  name: IObject
  nameWithType: IObject
  fullName: OpenTl.Schema.IObject
- uid: OpenTl.Schema.IRequest`1
  commentId: T:OpenTl.Schema.IRequest`1
  isExternal: false
  name: IRequest<TResult>
  nameWithType: IRequest<TResult>
  fullName: OpenTl.Schema.IRequest<TResult>
  nameWithType.vb: IRequest(Of TResult)
  fullName.vb: OpenTl.Schema.IRequest(Of TResult)
  name.vb: IRequest(Of TResult)
  spec.csharp:
  - uid: OpenTl.Schema.IRequest`1
    name: IRequest
    nameWithType: IRequest
    fullName: OpenTl.Schema.IRequest
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: OpenTl.Schema.IRequest`1
    name: IRequest
    nameWithType: IRequest
    fullName: OpenTl.Schema.IRequest
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: OpenTl.Schema
  commentId: N:OpenTl.Schema
  isExternal: false
  name: OpenTl.Schema
  nameWithType: OpenTl.Schema
  fullName: OpenTl.Schema
- uid: OpenTl.Schema.Messages.RequestImportChatInvite.HashAsBinary*
  commentId: Overload:OpenTl.Schema.Messages.RequestImportChatInvite.HashAsBinary
  isExternal: false
  name: HashAsBinary
  nameWithType: RequestImportChatInvite.HashAsBinary
  fullName: OpenTl.Schema.Messages.RequestImportChatInvite.HashAsBinary
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: OpenTl.Schema.Messages.RequestImportChatInvite.Hash*
  commentId: Overload:OpenTl.Schema.Messages.RequestImportChatInvite.Hash
  isExternal: false
  name: Hash
  nameWithType: RequestImportChatInvite.Hash
  fullName: OpenTl.Schema.Messages.RequestImportChatInvite.Hash
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
